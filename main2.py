import os
from dotenv import load_dotenv
import telebot
import time
import json
import datetime
from collections import defaultdict

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–í .env —Ñ–∞–π–ª–µ –Ω–µ—Ç TOKEN")

bot = telebot.TeleBot(TOKEN)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_activity = defaultdict(list)
MAX_NOTES_PER_USER = 50  # –õ–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_notes():
    global notes, note_counter
    try:
        with open('notes.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            notes = data.get('notes', {})
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int (json —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ str)
            notes = {int(k): v for k, v in notes.items()}
            note_counter = data.get('counter', 1)
    except FileNotFoundError:
        notes = {}
        note_counter = 1


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª
def save_notes():
    with open('notes.json', 'w', encoding='utf-8') as f:
        json.dump({
            'notes': notes,
            'counter': note_counter
        }, f, ensure_ascii=False, indent=2)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
def load_activity():
    global user_activity
    try:
        with open('activity.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
            user_activity = {int(k): v for k, v in data.items()}
    except FileNotFoundError:
        user_activity = {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª
def save_activity():
    with open('activity.json', 'w', encoding='utf-8') as f:
        json.dump(user_activity, f, ensure_ascii=False, indent=2)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def log_activity(user_id):
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    if user_id not in user_activity:
        user_activity[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    if today not in user_activity[user_id]:
        user_activity[user_id].append(today)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_activity[user_id] = user_activity[user_id][-30:]
        save_activity()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def count_user_notes(user_id):
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å user_id –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏
    return len(notes)  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ASCII –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
def create_activity_chart(user_id):
    today = datetime.datetime.now()
    week_days = []

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    for i in range(6, -1, -1):
        day = today - datetime.timedelta(days=i)
        week_days.append(day.strftime("%Y-%m-%d"))

    # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
    activity_data = []
    for day in week_days:
        if user_id in user_activity and day in user_activity[user_id]:
            activity_data.append('‚ñà')  # –ü–æ–ª–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –¥–Ω—è —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        else:
            activity_data.append('‚ñë')  # –ü—É—Å—Ç–æ–π –±–ª–æ–∫ –¥–ª—è –¥–Ω—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    chart = "üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    chart += "     " + "  ".join(days_names) + "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart += "     " + "  ".join(activity_data) + "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã
    dates = [(today - datetime.timedelta(days=i)).strftime("%d.%m") for i in range(6, -1, -1)]
    chart += "     " + " ".join(dates) + "\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    active_days = sum(1 for day in week_days if user_id in user_activity and day in user_activity[user_id])
    chart += f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {active_days}/7"

    return chart


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_notes()
load_activity()


@bot.message_handler(commands=['start'])
def start(message):
    log_activity(message.from_user.id)
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


@bot.message_handler(commands=['help'])
def help_cmd(message):
    log_activity(message.from_user.id)
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/note_add <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/note_find <–∑–∞–ø—Ä–æ—Å> - –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É
/note_edit <id> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_del <id> - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_count - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫
/note_export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–∞–π–ª
/note_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['note_add'])
def note_add(message):
    log_activity(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫
    user_notes_count = count_user_notes(message.from_user.id)
    if user_notes_count >= MAX_NOTES_PER_USER:
        bot.reply_to(message, f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫! –ú–∞–∫—Å–∏–º—É–º {MAX_NOTES_PER_USER} –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    global note_counter
    text = message.text.replace('/note_add', '').strip()
    if not text:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.")
        return

    notes[note_counter] = text
    save_notes()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    bot.reply_to(message, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_counter} –¥–æ–±–∞–≤–ª–µ–Ω–∞: {text}")
    note_counter += 1


@bot.message_handler(commands=['note_count'])
def note_count(message):
    log_activity(message.from_user.id)
    count = len(notes)
    user_notes_count = count_user_notes(message.from_user.id)

    if count == 0:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    elif count == 1:
        bot.reply_to(message, f"–£ –≤–∞—Å 1 –∑–∞–º–µ—Ç–∫–∞. (–õ–∏–º–∏—Ç: {MAX_NOTES_PER_USER})")
    elif 2 <= count <= 4:
        bot.reply_to(message, f"–£ –≤–∞—Å {count} –∑–∞–º–µ—Ç–∫–∏. (–õ–∏–º–∏—Ç: {MAX_NOTES_PER_USER})")
    else:
        bot.reply_to(message, f"–£ –≤–∞—Å {count} –∑–∞–º–µ—Ç–æ–∫. (–õ–∏–º–∏—Ç: {MAX_NOTES_PER_USER})")


@bot.message_handler(commands=['note_list'])
def note_list(message):
    log_activity(message.from_user.id)
    if not notes:
        bot.reply_to(message, "–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    response = "üìù –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫:\n" + "\n".join([f"{id}: {text}" for id, text in notes.items()])
    bot.reply_to(message, response)


@bot.message_handler(commands=['note_find'])
def note_find(message):
    log_activity(message.from_user.id)
    query = message.text.replace('/note_find', '').strip()
    if not query:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    found = {id: text for id, text in notes.items() if query in text}
    if not found:
        bot.reply_to(message, "–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    response = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n" + "\n".join([f"{id}: {text}" for id, text in found.items()])
    bot.reply_to(message, response)


@bot.message_handler(commands=['note_edit'])
def note_edit(message):
    log_activity(message.from_user.id)
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /note_edit <id> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
        return
    try:
        note_id = int(parts[1])
        new_text = parts[2]
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if note_id not in notes:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    notes[note_id] = new_text
    save_notes()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    bot.reply_to(message, f"‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞ #{note_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_text}")


@bot.message_handler(commands=['note_del'])
def note_del(message):
    log_activity(message.from_user.id)
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    try:
        note_id = int(parts[1])
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if note_id not in notes:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    del notes[note_id]
    save_notes()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    bot.reply_to(message, f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É–¥–∞–ª–µ–Ω–∞.")


@bot.message_handler(commands=['note_export'])
def note_export(message):
    log_activity(message.from_user.id)
    if not notes:
        bot.reply_to(message, "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"notes_{timestamp}.txt"

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–∞–π–ª
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫ –æ—Ç {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
        f.write("=" * 50 + "\n\n")
        for note_id, text in notes.items():
            f.write(f"–ó–∞–º–µ—Ç–∫–∞ #{note_id}:\n")
            f.write(f"{text}\n")
            f.write("-" * 30 + "\n")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(filename, 'rb') as f:
        bot.send_document(message.chat.id, f, caption="üìÅ –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)


@bot.message_handler(commands=['note_stats'])
def note_stats(message):
    log_activity(message.from_user.id)
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º ASCII –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    chart = create_activity_chart(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_notes = len(notes)
    user_notes_count = count_user_notes(user_id)

    stats_text = f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {total_notes}\n"
    stats_text += f"‚Ä¢ –í–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫: {user_notes_count}\n"
    stats_text += f"‚Ä¢ –õ–∏–º–∏—Ç: {MAX_NOTES_PER_USER} –∑–∞–º–µ—Ç–æ–∫\n"

    if user_id in user_activity:
        total_active_days = len(user_activity[user_id])
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {total_active_days}"

    bot.reply_to(message, chart + stats_text)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.infinity_polling(skip_pending=True)